import os

from androguard.core.bytecodes import apk
from androguard.core.bytecodes import dvm
from sklearn import tree
from sklearn.externals import joblib
from sklearn.model_selection import cross_val_score
import pandas as pd
import pickle


def get3chars_list(s):
    """
          Return list of all the 3-grams in s.

          :param s: a unicode string to split to 3 grams
          :type s: unicode string

          :rtype: a list of unicode strings.
              """
    trio_list = []
    for i in range(0, len(s) - 2):
        trio_list.append(s[i] + s[i + 1] + s[i + 2])
    return trio_list

def get_dex_3byte_grams(apk):
    """
           Return dictionary (key: 3-bytes-gram in dex of the given apk, value: this gram's frequency in dex of the given apk)

           :param apk: apk file
           :type apk: APK

           :rtype: a dictionary of {(key: unicode, value: int)
           """
    dex = dvm.DalvikVMFormat(apk.get_dex())
    dex_strings = dex.get_strings()
    trio_freq = {}  # key: trio, value: frequency
    remainder = u''
    for i in range(0, len(dex_strings)):
        trio_list = get3chars_list(remainder + dex_strings[i])
        remainder = dex_strings[i][-2:]
        for trio in trio_list:
            if trio_freq.get(trio) != None:
                trio_freq[trio] += 1
            else:
                trio_freq[trio] = 0
    return trio_freq

def max_trio_freq(trio_freq,amount):
    max_trio=[]
    for i in range(0, amount):
        max=0
        argmax=u''
        for trio in trio_freq:
            if trio_freq[trio]>max:
                max= trio_freq[trio]
                argmax=trio
        if argmax!=u'':
            max_trio.append(argmax)
            del trio_freq[argmax]
    return max_trio

def write_to_mem(clf):
    #https://machinelearningmastery.com/save-load-machine-learning-models-python-scikit-learn/
    file_name='finalized_model.joblib'
    joblib.dump(clf, file_name)

if __name__=='__main__':
    files = os.listdir("./files")
    trio_freq = {} #the whole dictionary of trio_frquency for all the files.
    path_dict={}
    for f_path in files:
        try:
            apk_trio_freq= get_dex_3byte_grams(apk.APK("files/"+f_path)) #dictionary of specific this apk file.
            path_dict[f_path]=apk_trio_freq
            for key in apk_trio_freq:
                if key not in trio_freq:
                    trio_freq[key] = 0
                trio_freq[key] += apk_trio_freq[key]
        except:
            print("Problematic Mainfest: "+ f_path)

    trio_names=max_trio_freq(trio_freq,30)
    to_write=""
    for feature in trio_names:
        to_write=to_write+feature+","
    to_write=to_write[:len(to_write)-1]
    file = open("features.txt", "w")
    file.write(to_write)
    file.close()
    training_set=[]
    for f_path in path_dict:
        record =[]
        for trio in trio_names:
            if trio in path_dict[f_path]:
                record.append([path_dict[f_path]])
            else:
                record.append(0)
        training_set.append(record)
    training_classifications=[]
    for r in range(0, len(training_set)):
        if r%2==0:
            training_classifications.append(1)
        else:
            training_classifications.append(0)
    clf = tree.DecisionTreeClassifier()
    clf = clf.fit(training_set,training_classifications)
    scores= cross_val_score(clf, training_set, training_classifications, cv=2)
    write_to_mem(clf)

